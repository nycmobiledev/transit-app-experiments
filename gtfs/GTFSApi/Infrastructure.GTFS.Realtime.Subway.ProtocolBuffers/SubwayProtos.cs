// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class SubwayProtos {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
      registry.Add(global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.SubwayProtos.NyctFeedHeader);
      registry.Add(global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.SubwayProtos.NyctTripDescriptor);
      registry.Add(global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.SubwayProtos.NyctStopTimeUpdate);
    }
    #endregion
    #region Extensions
    public const int NyctFeedHeaderFieldNumber = 1001;
    public static pb::GeneratedExtensionBase<global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.NyctFeedHeader> NyctFeedHeader;
    public const int NyctTripDescriptorFieldNumber = 1001;
    public static pb::GeneratedExtensionBase<global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.NyctTripDescriptor> NyctTripDescriptor;
    public const int NyctStopTimeUpdateFieldNumber = 1001;
    public static pb::GeneratedExtensionBase<global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.NyctStopTimeUpdate> NyctStopTimeUpdate;
    #endregion
    
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_TripReplacementPeriod__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.TripReplacementPeriod, global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.TripReplacementPeriod.Builder> internal__static_TripReplacementPeriod__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_NyctFeedHeader__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.NyctFeedHeader, global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.NyctFeedHeader.Builder> internal__static_NyctFeedHeader__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_NyctTripDescriptor__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.NyctTripDescriptor, global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.NyctTripDescriptor.Builder> internal__static_NyctTripDescriptor__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_NyctStopTimeUpdate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.NyctStopTimeUpdate, global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.NyctStopTimeUpdate.Builder> internal__static_NyctStopTimeUpdate__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static SubwayProtos() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "Chl0cmFuc2l0L255Y3Qtc3Vid2F5LnByb3RvGht0cmFuc2l0L2d0ZnMtcmVh" + 
          "bHRpbWUucHJvdG8aJGdvb2dsZS9wcm90b2J1Zi9jc2hhcnBfb3B0aW9ucy5w" + 
          "cm90byJiChVUcmlwUmVwbGFjZW1lbnRQZXJpb2QSEAoIcm91dGVfaWQYASAB" + 
          "KAkSNwoScmVwbGFjZW1lbnRfcGVyaW9kGAIgASgLMhsudHJhbnNpdF9yZWFs" + 
          "dGltZS5UaW1lUmFuZ2UiZgoOTnljdEZlZWRIZWFkZXISGwoTbnljdF9zdWJ3" + 
          "YXlfdmVyc2lvbhgBIAIoCRI3Chd0cmlwX3JlcGxhY2VtZW50X3BlcmlvZBgC" + 
          "IAMoCzIWLlRyaXBSZXBsYWNlbWVudFBlcmlvZCKkAQoSTnljdFRyaXBEZXNj" + 
          "cmlwdG9yEhAKCHRyYWluX2lkGAEgASgJEhMKC2lzX2Fzc2lnbmVkGAIgASgI" + 
          "EjAKCWRpcmVjdGlvbhgDIAEoDjIdLk55Y3RUcmlwRGVzY3JpcHRvci5EaXJl" + 
          "Y3Rpb24iNQoJRGlyZWN0aW9uEgkKBU5PUlRIEAESCAoERUFTVBACEgkKBVNP" + 
          "VVRIEAMSCAoEV0VTVBAEIkMKEk55Y3RTdG9wVGltZVVwZGF0ZRIXCg9zY2hl" + 
          "ZHVsZWRfdHJhY2sYASABKAkSFAoMYWN0dWFsX3RyYWNrGAIgASgJOkgKEG55" + 
          "Y3RfZmVlZF9oZWFkZXISHC50cmFuc2l0X3JlYWx0aW1lLkZlZWRIZWFkZXIY" + 
          "6QcgASgLMg8uTnljdEZlZWRIZWFkZXI6VAoUbnljdF90cmlwX2Rlc2NyaXB0" + 
          "b3ISIC50cmFuc2l0X3JlYWx0aW1lLlRyaXBEZXNjcmlwdG9yGOkHIAEoCzIT" + 
          "Lk55Y3RUcmlwRGVzY3JpcHRvcjpgChVueWN0X3N0b3BfdGltZV91cGRhdGUS" + 
          "Ky50cmFuc2l0X3JlYWx0aW1lLlRyaXBVcGRhdGUuU3RvcFRpbWVVcGRhdGUY" + 
          "6QcgASgLMhMuTnljdFN0b3BUaW1lVXBkYXRlQnsKG2NvbS5nb29nbGUudHJh" + 
          "bnNpdC5yZWFsdGltZcI+WwpLTllDTW9iaWxlRGV2LlRyYW5zaXRBcHAuSW5m" + 
          "cmFzdHJ1Y3R1cmUuR1RGUy5SZWFsdGltZS5TdWJ3YXkuUHJvdG9jb2xCdWZm" + 
          "ZXJzEgxTdWJ3YXlQcm90b3M=");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_TripReplacementPeriod__Descriptor = Descriptor.MessageTypes[0];
        internal__static_TripReplacementPeriod__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.TripReplacementPeriod, global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.TripReplacementPeriod.Builder>(internal__static_TripReplacementPeriod__Descriptor,
                new string[] { "RouteId", "ReplacementPeriod", });
        internal__static_NyctFeedHeader__Descriptor = Descriptor.MessageTypes[1];
        internal__static_NyctFeedHeader__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.NyctFeedHeader, global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.NyctFeedHeader.Builder>(internal__static_NyctFeedHeader__Descriptor,
                new string[] { "NyctSubwayVersion", "TripReplacementPeriod", });
        internal__static_NyctTripDescriptor__Descriptor = Descriptor.MessageTypes[2];
        internal__static_NyctTripDescriptor__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.NyctTripDescriptor, global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.NyctTripDescriptor.Builder>(internal__static_NyctTripDescriptor__Descriptor,
                new string[] { "TrainId", "IsAssigned", "Direction", });
        internal__static_NyctStopTimeUpdate__Descriptor = Descriptor.MessageTypes[3];
        internal__static_NyctStopTimeUpdate__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.NyctStopTimeUpdate, global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.NyctStopTimeUpdate.Builder>(internal__static_NyctStopTimeUpdate__Descriptor,
                new string[] { "ScheduledTrack", "ActualTrack", });
        global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.SubwayProtos.NyctFeedHeader = pb::GeneratedSingleExtension<global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.NyctFeedHeader>.CreateInstance(global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.SubwayProtos.Descriptor.Extensions[0]);
        global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.SubwayProtos.NyctTripDescriptor = pb::GeneratedSingleExtension<global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.NyctTripDescriptor>.CreateInstance(global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.SubwayProtos.Descriptor.Extensions[1]);
        global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.SubwayProtos.NyctStopTimeUpdate = pb::GeneratedSingleExtension<global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.NyctStopTimeUpdate>.CreateInstance(global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.SubwayProtos.Descriptor.Extensions[2]);
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        global::transit_realtime.Gtfsrealtime.RegisterAllExtensions(registry);
        global::Google.ProtocolBuffers.DescriptorProtos.CSharpOptions.RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::transit_realtime.Gtfsrealtime.Descriptor, 
          global::Google.ProtocolBuffers.DescriptorProtos.CSharpOptions.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TripReplacementPeriod : pb::GeneratedMessage<TripReplacementPeriod, TripReplacementPeriod.Builder> {
    private TripReplacementPeriod() { }
    private static readonly TripReplacementPeriod defaultInstance = new TripReplacementPeriod().MakeReadOnly();
    private static readonly string[] _tripReplacementPeriodFieldNames = new string[] { "replacement_period", "route_id" };
    private static readonly uint[] _tripReplacementPeriodFieldTags = new uint[] { 18, 10 };
    public static TripReplacementPeriod DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TripReplacementPeriod DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TripReplacementPeriod ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.SubwayProtos.internal__static_TripReplacementPeriod__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TripReplacementPeriod, TripReplacementPeriod.Builder> InternalFieldAccessors {
      get { return global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.SubwayProtos.internal__static_TripReplacementPeriod__FieldAccessorTable; }
    }
    
    public const int RouteIdFieldNumber = 1;
    private bool hasRouteId;
    private string routeId_ = "";
    public bool HasRouteId {
      get { return hasRouteId; }
    }
    public string RouteId {
      get { return routeId_; }
    }
    
    public const int ReplacementPeriodFieldNumber = 2;
    private bool hasReplacementPeriod;
    private global::transit_realtime.TimeRange replacementPeriod_;
    public bool HasReplacementPeriod {
      get { return hasReplacementPeriod; }
    }
    public global::transit_realtime.TimeRange ReplacementPeriod {
      get { return replacementPeriod_ ?? global::transit_realtime.TimeRange.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _tripReplacementPeriodFieldNames;
      if (hasRouteId) {
        output.WriteString(1, field_names[1], RouteId);
      }
      if (hasReplacementPeriod) {
        output.WriteMessage(2, field_names[0], ReplacementPeriod);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasRouteId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, RouteId);
        }
        if (hasReplacementPeriod) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, ReplacementPeriod);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static TripReplacementPeriod ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TripReplacementPeriod ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TripReplacementPeriod ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TripReplacementPeriod ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TripReplacementPeriod ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TripReplacementPeriod ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TripReplacementPeriod ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TripReplacementPeriod ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TripReplacementPeriod ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TripReplacementPeriod ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TripReplacementPeriod MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TripReplacementPeriod prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<TripReplacementPeriod, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TripReplacementPeriod cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TripReplacementPeriod result;
      
      private TripReplacementPeriod PrepareBuilder() {
        if (resultIsReadOnly) {
          TripReplacementPeriod original = result;
          result = new TripReplacementPeriod();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TripReplacementPeriod MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.TripReplacementPeriod.Descriptor; }
      }
      
      public override TripReplacementPeriod DefaultInstanceForType {
        get { return global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.TripReplacementPeriod.DefaultInstance; }
      }
      
      public override TripReplacementPeriod BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TripReplacementPeriod) {
          return MergeFrom((TripReplacementPeriod) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TripReplacementPeriod other) {
        if (other == global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.TripReplacementPeriod.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRouteId) {
          RouteId = other.RouteId;
        }
        if (other.HasReplacementPeriod) {
          MergeReplacementPeriod(other.ReplacementPeriod);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_tripReplacementPeriodFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _tripReplacementPeriodFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasRouteId = input.ReadString(ref result.routeId_);
              break;
            }
            case 18: {
              global::transit_realtime.TimeRange.Builder subBuilder = global::transit_realtime.TimeRange.CreateBuilder();
              if (result.hasReplacementPeriod) {
                subBuilder.MergeFrom(ReplacementPeriod);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ReplacementPeriod = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRouteId {
        get { return result.hasRouteId; }
      }
      public string RouteId {
        get { return result.RouteId; }
        set { SetRouteId(value); }
      }
      public Builder SetRouteId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRouteId = true;
        result.routeId_ = value;
        return this;
      }
      public Builder ClearRouteId() {
        PrepareBuilder();
        result.hasRouteId = false;
        result.routeId_ = "";
        return this;
      }
      
      public bool HasReplacementPeriod {
       get { return result.hasReplacementPeriod; }
      }
      public global::transit_realtime.TimeRange ReplacementPeriod {
        get { return result.ReplacementPeriod; }
        set { SetReplacementPeriod(value); }
      }
      public Builder SetReplacementPeriod(global::transit_realtime.TimeRange value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasReplacementPeriod = true;
        result.replacementPeriod_ = value;
        return this;
      }
      public Builder SetReplacementPeriod(global::transit_realtime.TimeRange.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasReplacementPeriod = true;
        result.replacementPeriod_ = builderForValue.Build();
        return this;
      }
      public Builder MergeReplacementPeriod(global::transit_realtime.TimeRange value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasReplacementPeriod &&
            result.replacementPeriod_ != global::transit_realtime.TimeRange.DefaultInstance) {
            result.replacementPeriod_ = global::transit_realtime.TimeRange.CreateBuilder(result.replacementPeriod_).MergeFrom(value).BuildPartial();
        } else {
          result.replacementPeriod_ = value;
        }
        result.hasReplacementPeriod = true;
        return this;
      }
      public Builder ClearReplacementPeriod() {
        PrepareBuilder();
        result.hasReplacementPeriod = false;
        result.replacementPeriod_ = null;
        return this;
      }
    }
    static TripReplacementPeriod() {
      object.ReferenceEquals(global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.SubwayProtos.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NyctFeedHeader : pb::GeneratedMessage<NyctFeedHeader, NyctFeedHeader.Builder> {
    private NyctFeedHeader() { }
    private static readonly NyctFeedHeader defaultInstance = new NyctFeedHeader().MakeReadOnly();
    private static readonly string[] _nyctFeedHeaderFieldNames = new string[] { "nyct_subway_version", "trip_replacement_period" };
    private static readonly uint[] _nyctFeedHeaderFieldTags = new uint[] { 10, 18 };
    public static NyctFeedHeader DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NyctFeedHeader DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NyctFeedHeader ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.SubwayProtos.internal__static_NyctFeedHeader__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NyctFeedHeader, NyctFeedHeader.Builder> InternalFieldAccessors {
      get { return global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.SubwayProtos.internal__static_NyctFeedHeader__FieldAccessorTable; }
    }
    
    public const int NyctSubwayVersionFieldNumber = 1;
    private bool hasNyctSubwayVersion;
    private string nyctSubwayVersion_ = "";
    public bool HasNyctSubwayVersion {
      get { return hasNyctSubwayVersion; }
    }
    public string NyctSubwayVersion {
      get { return nyctSubwayVersion_; }
    }
    
    public const int TripReplacementPeriodFieldNumber = 2;
    private pbc::PopsicleList<global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.TripReplacementPeriod> tripReplacementPeriod_ = new pbc::PopsicleList<global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.TripReplacementPeriod>();
    public scg::IList<global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.TripReplacementPeriod> TripReplacementPeriodList {
      get { return tripReplacementPeriod_; }
    }
    public int TripReplacementPeriodCount {
      get { return tripReplacementPeriod_.Count; }
    }
    public global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.TripReplacementPeriod GetTripReplacementPeriod(int index) {
      return tripReplacementPeriod_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasNyctSubwayVersion) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _nyctFeedHeaderFieldNames;
      if (hasNyctSubwayVersion) {
        output.WriteString(1, field_names[0], NyctSubwayVersion);
      }
      if (tripReplacementPeriod_.Count > 0) {
        output.WriteMessageArray(2, field_names[1], tripReplacementPeriod_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasNyctSubwayVersion) {
          size += pb::CodedOutputStream.ComputeStringSize(1, NyctSubwayVersion);
        }
        foreach (global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.TripReplacementPeriod element in TripReplacementPeriodList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static NyctFeedHeader ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NyctFeedHeader ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NyctFeedHeader ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NyctFeedHeader ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NyctFeedHeader ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NyctFeedHeader ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NyctFeedHeader ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NyctFeedHeader ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NyctFeedHeader ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NyctFeedHeader ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NyctFeedHeader MakeReadOnly() {
      tripReplacementPeriod_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NyctFeedHeader prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NyctFeedHeader, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NyctFeedHeader cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NyctFeedHeader result;
      
      private NyctFeedHeader PrepareBuilder() {
        if (resultIsReadOnly) {
          NyctFeedHeader original = result;
          result = new NyctFeedHeader();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NyctFeedHeader MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.NyctFeedHeader.Descriptor; }
      }
      
      public override NyctFeedHeader DefaultInstanceForType {
        get { return global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.NyctFeedHeader.DefaultInstance; }
      }
      
      public override NyctFeedHeader BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NyctFeedHeader) {
          return MergeFrom((NyctFeedHeader) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NyctFeedHeader other) {
        if (other == global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.NyctFeedHeader.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasNyctSubwayVersion) {
          NyctSubwayVersion = other.NyctSubwayVersion;
        }
        if (other.tripReplacementPeriod_.Count != 0) {
          result.tripReplacementPeriod_.Add(other.tripReplacementPeriod_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_nyctFeedHeaderFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _nyctFeedHeaderFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasNyctSubwayVersion = input.ReadString(ref result.nyctSubwayVersion_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.tripReplacementPeriod_, global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.TripReplacementPeriod.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasNyctSubwayVersion {
        get { return result.hasNyctSubwayVersion; }
      }
      public string NyctSubwayVersion {
        get { return result.NyctSubwayVersion; }
        set { SetNyctSubwayVersion(value); }
      }
      public Builder SetNyctSubwayVersion(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNyctSubwayVersion = true;
        result.nyctSubwayVersion_ = value;
        return this;
      }
      public Builder ClearNyctSubwayVersion() {
        PrepareBuilder();
        result.hasNyctSubwayVersion = false;
        result.nyctSubwayVersion_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.TripReplacementPeriod> TripReplacementPeriodList {
        get { return PrepareBuilder().tripReplacementPeriod_; }
      }
      public int TripReplacementPeriodCount {
        get { return result.TripReplacementPeriodCount; }
      }
      public global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.TripReplacementPeriod GetTripReplacementPeriod(int index) {
        return result.GetTripReplacementPeriod(index);
      }
      public Builder SetTripReplacementPeriod(int index, global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.TripReplacementPeriod value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.tripReplacementPeriod_[index] = value;
        return this;
      }
      public Builder SetTripReplacementPeriod(int index, global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.TripReplacementPeriod.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.tripReplacementPeriod_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddTripReplacementPeriod(global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.TripReplacementPeriod value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.tripReplacementPeriod_.Add(value);
        return this;
      }
      public Builder AddTripReplacementPeriod(global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.TripReplacementPeriod.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.tripReplacementPeriod_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeTripReplacementPeriod(scg::IEnumerable<global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.TripReplacementPeriod> values) {
        PrepareBuilder();
        result.tripReplacementPeriod_.Add(values);
        return this;
      }
      public Builder ClearTripReplacementPeriod() {
        PrepareBuilder();
        result.tripReplacementPeriod_.Clear();
        return this;
      }
    }
    static NyctFeedHeader() {
      object.ReferenceEquals(global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.SubwayProtos.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NyctTripDescriptor : pb::GeneratedMessage<NyctTripDescriptor, NyctTripDescriptor.Builder> {
    private NyctTripDescriptor() { }
    private static readonly NyctTripDescriptor defaultInstance = new NyctTripDescriptor().MakeReadOnly();
    private static readonly string[] _nyctTripDescriptorFieldNames = new string[] { "direction", "is_assigned", "train_id" };
    private static readonly uint[] _nyctTripDescriptorFieldTags = new uint[] { 24, 16, 10 };
    public static NyctTripDescriptor DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NyctTripDescriptor DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NyctTripDescriptor ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.SubwayProtos.internal__static_NyctTripDescriptor__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NyctTripDescriptor, NyctTripDescriptor.Builder> InternalFieldAccessors {
      get { return global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.SubwayProtos.internal__static_NyctTripDescriptor__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum Direction {
        NORTH = 1,
        EAST = 2,
        SOUTH = 3,
        WEST = 4,
      }
      
    }
    #endregion
    
    public const int TrainIdFieldNumber = 1;
    private bool hasTrainId;
    private string trainId_ = "";
    public bool HasTrainId {
      get { return hasTrainId; }
    }
    public string TrainId {
      get { return trainId_; }
    }
    
    public const int IsAssignedFieldNumber = 2;
    private bool hasIsAssigned;
    private bool isAssigned_;
    public bool HasIsAssigned {
      get { return hasIsAssigned; }
    }
    public bool IsAssigned {
      get { return isAssigned_; }
    }
    
    public const int DirectionFieldNumber = 3;
    private bool hasDirection;
    private global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.NyctTripDescriptor.Types.Direction direction_ = global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.NyctTripDescriptor.Types.Direction.NORTH;
    public bool HasDirection {
      get { return hasDirection; }
    }
    public global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.NyctTripDescriptor.Types.Direction Direction {
      get { return direction_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _nyctTripDescriptorFieldNames;
      if (hasTrainId) {
        output.WriteString(1, field_names[2], TrainId);
      }
      if (hasIsAssigned) {
        output.WriteBool(2, field_names[1], IsAssigned);
      }
      if (hasDirection) {
        output.WriteEnum(3, field_names[0], (int) Direction, Direction);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTrainId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, TrainId);
        }
        if (hasIsAssigned) {
          size += pb::CodedOutputStream.ComputeBoolSize(2, IsAssigned);
        }
        if (hasDirection) {
          size += pb::CodedOutputStream.ComputeEnumSize(3, (int) Direction);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static NyctTripDescriptor ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NyctTripDescriptor ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NyctTripDescriptor ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NyctTripDescriptor ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NyctTripDescriptor ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NyctTripDescriptor ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NyctTripDescriptor ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NyctTripDescriptor ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NyctTripDescriptor ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NyctTripDescriptor ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NyctTripDescriptor MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NyctTripDescriptor prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NyctTripDescriptor, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NyctTripDescriptor cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NyctTripDescriptor result;
      
      private NyctTripDescriptor PrepareBuilder() {
        if (resultIsReadOnly) {
          NyctTripDescriptor original = result;
          result = new NyctTripDescriptor();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NyctTripDescriptor MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.NyctTripDescriptor.Descriptor; }
      }
      
      public override NyctTripDescriptor DefaultInstanceForType {
        get { return global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.NyctTripDescriptor.DefaultInstance; }
      }
      
      public override NyctTripDescriptor BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NyctTripDescriptor) {
          return MergeFrom((NyctTripDescriptor) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NyctTripDescriptor other) {
        if (other == global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.NyctTripDescriptor.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTrainId) {
          TrainId = other.TrainId;
        }
        if (other.HasIsAssigned) {
          IsAssigned = other.IsAssigned;
        }
        if (other.HasDirection) {
          Direction = other.Direction;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_nyctTripDescriptorFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _nyctTripDescriptorFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasTrainId = input.ReadString(ref result.trainId_);
              break;
            }
            case 16: {
              result.hasIsAssigned = input.ReadBool(ref result.isAssigned_);
              break;
            }
            case 24: {
              object unknown;
              if(input.ReadEnum(ref result.direction_, out unknown)) {
                result.hasDirection = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(3, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTrainId {
        get { return result.hasTrainId; }
      }
      public string TrainId {
        get { return result.TrainId; }
        set { SetTrainId(value); }
      }
      public Builder SetTrainId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTrainId = true;
        result.trainId_ = value;
        return this;
      }
      public Builder ClearTrainId() {
        PrepareBuilder();
        result.hasTrainId = false;
        result.trainId_ = "";
        return this;
      }
      
      public bool HasIsAssigned {
        get { return result.hasIsAssigned; }
      }
      public bool IsAssigned {
        get { return result.IsAssigned; }
        set { SetIsAssigned(value); }
      }
      public Builder SetIsAssigned(bool value) {
        PrepareBuilder();
        result.hasIsAssigned = true;
        result.isAssigned_ = value;
        return this;
      }
      public Builder ClearIsAssigned() {
        PrepareBuilder();
        result.hasIsAssigned = false;
        result.isAssigned_ = false;
        return this;
      }
      
      public bool HasDirection {
       get { return result.hasDirection; }
      }
      public global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.NyctTripDescriptor.Types.Direction Direction {
        get { return result.Direction; }
        set { SetDirection(value); }
      }
      public Builder SetDirection(global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.NyctTripDescriptor.Types.Direction value) {
        PrepareBuilder();
        result.hasDirection = true;
        result.direction_ = value;
        return this;
      }
      public Builder ClearDirection() {
        PrepareBuilder();
        result.hasDirection = false;
        result.direction_ = global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.NyctTripDescriptor.Types.Direction.NORTH;
        return this;
      }
    }
    static NyctTripDescriptor() {
      object.ReferenceEquals(global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.SubwayProtos.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NyctStopTimeUpdate : pb::GeneratedMessage<NyctStopTimeUpdate, NyctStopTimeUpdate.Builder> {
    private NyctStopTimeUpdate() { }
    private static readonly NyctStopTimeUpdate defaultInstance = new NyctStopTimeUpdate().MakeReadOnly();
    private static readonly string[] _nyctStopTimeUpdateFieldNames = new string[] { "actual_track", "scheduled_track" };
    private static readonly uint[] _nyctStopTimeUpdateFieldTags = new uint[] { 18, 10 };
    public static NyctStopTimeUpdate DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NyctStopTimeUpdate DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NyctStopTimeUpdate ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.SubwayProtos.internal__static_NyctStopTimeUpdate__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NyctStopTimeUpdate, NyctStopTimeUpdate.Builder> InternalFieldAccessors {
      get { return global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.SubwayProtos.internal__static_NyctStopTimeUpdate__FieldAccessorTable; }
    }
    
    public const int ScheduledTrackFieldNumber = 1;
    private bool hasScheduledTrack;
    private string scheduledTrack_ = "";
    public bool HasScheduledTrack {
      get { return hasScheduledTrack; }
    }
    public string ScheduledTrack {
      get { return scheduledTrack_; }
    }
    
    public const int ActualTrackFieldNumber = 2;
    private bool hasActualTrack;
    private string actualTrack_ = "";
    public bool HasActualTrack {
      get { return hasActualTrack; }
    }
    public string ActualTrack {
      get { return actualTrack_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _nyctStopTimeUpdateFieldNames;
      if (hasScheduledTrack) {
        output.WriteString(1, field_names[1], ScheduledTrack);
      }
      if (hasActualTrack) {
        output.WriteString(2, field_names[0], ActualTrack);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasScheduledTrack) {
          size += pb::CodedOutputStream.ComputeStringSize(1, ScheduledTrack);
        }
        if (hasActualTrack) {
          size += pb::CodedOutputStream.ComputeStringSize(2, ActualTrack);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static NyctStopTimeUpdate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NyctStopTimeUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NyctStopTimeUpdate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NyctStopTimeUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NyctStopTimeUpdate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NyctStopTimeUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NyctStopTimeUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NyctStopTimeUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NyctStopTimeUpdate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NyctStopTimeUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NyctStopTimeUpdate MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NyctStopTimeUpdate prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NyctStopTimeUpdate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NyctStopTimeUpdate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NyctStopTimeUpdate result;
      
      private NyctStopTimeUpdate PrepareBuilder() {
        if (resultIsReadOnly) {
          NyctStopTimeUpdate original = result;
          result = new NyctStopTimeUpdate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NyctStopTimeUpdate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.NyctStopTimeUpdate.Descriptor; }
      }
      
      public override NyctStopTimeUpdate DefaultInstanceForType {
        get { return global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.NyctStopTimeUpdate.DefaultInstance; }
      }
      
      public override NyctStopTimeUpdate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NyctStopTimeUpdate) {
          return MergeFrom((NyctStopTimeUpdate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NyctStopTimeUpdate other) {
        if (other == global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.NyctStopTimeUpdate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasScheduledTrack) {
          ScheduledTrack = other.ScheduledTrack;
        }
        if (other.HasActualTrack) {
          ActualTrack = other.ActualTrack;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_nyctStopTimeUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _nyctStopTimeUpdateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasScheduledTrack = input.ReadString(ref result.scheduledTrack_);
              break;
            }
            case 18: {
              result.hasActualTrack = input.ReadString(ref result.actualTrack_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasScheduledTrack {
        get { return result.hasScheduledTrack; }
      }
      public string ScheduledTrack {
        get { return result.ScheduledTrack; }
        set { SetScheduledTrack(value); }
      }
      public Builder SetScheduledTrack(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasScheduledTrack = true;
        result.scheduledTrack_ = value;
        return this;
      }
      public Builder ClearScheduledTrack() {
        PrepareBuilder();
        result.hasScheduledTrack = false;
        result.scheduledTrack_ = "";
        return this;
      }
      
      public bool HasActualTrack {
        get { return result.hasActualTrack; }
      }
      public string ActualTrack {
        get { return result.ActualTrack; }
        set { SetActualTrack(value); }
      }
      public Builder SetActualTrack(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActualTrack = true;
        result.actualTrack_ = value;
        return this;
      }
      public Builder ClearActualTrack() {
        PrepareBuilder();
        result.hasActualTrack = false;
        result.actualTrack_ = "";
        return this;
      }
    }
    static NyctStopTimeUpdate() {
      object.ReferenceEquals(global::NYCMobileDev.TransitApp.Infrastructure.GTFS.Realtime.Subway.ProtocolBuffers.SubwayProtos.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
