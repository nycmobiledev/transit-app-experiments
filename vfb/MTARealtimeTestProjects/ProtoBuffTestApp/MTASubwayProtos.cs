// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!

#pragma warning disable 1591, 0612, 3021

#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
using System;

namespace XPlatform.WheresMyTrain.MTA.Subway
{
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class MTASubwayProtos
    {
        #region Extension registration

        public static void RegisterAllExtensions(pb::ExtensionRegistry registry)
        {
            registry.Add(NyctFeedHeader);
            registry.Add(NyctTripDescriptor);
            registry.Add(NyctStopTimeUpdate);
        }

        #endregion

        #region Extensions

        public const int NyctFeedHeaderFieldNumber = 1001;

        public const int NyctTripDescriptorFieldNumber = 1001;

        public const int NyctStopTimeUpdateFieldNumber = 1001;

        public static pb::GeneratedExtensionBase<global::XPlatform.WheresMyTrain.MTA.Subway.NyctFeedHeader>
            NyctFeedHeader;

        public static pb::GeneratedExtensionBase<global::XPlatform.WheresMyTrain.MTA.Subway.NyctTripDescriptor>
            NyctTripDescriptor;

        public static pb::GeneratedExtensionBase<global::XPlatform.WheresMyTrain.MTA.Subway.NyctStopTimeUpdate>
            NyctStopTimeUpdate;

        #endregion

        #region Static variables

        internal static pbd::MessageDescriptor internal__static_TripReplacementPeriod__Descriptor;

        internal static
            pb::FieldAccess.FieldAccessorTable
                <global::XPlatform.WheresMyTrain.MTA.Subway.TripReplacementPeriod,
                    global::XPlatform.WheresMyTrain.MTA.Subway.TripReplacementPeriod.Builder>
            internal__static_TripReplacementPeriod__FieldAccessorTable;

        internal static pbd::MessageDescriptor internal__static_NyctFeedHeader__Descriptor;

        internal static
            pb::FieldAccess.FieldAccessorTable
                <global::XPlatform.WheresMyTrain.MTA.Subway.NyctFeedHeader,
                    global::XPlatform.WheresMyTrain.MTA.Subway.NyctFeedHeader.Builder>
            internal__static_NyctFeedHeader__FieldAccessorTable;

        internal static pbd::MessageDescriptor internal__static_NyctTripDescriptor__Descriptor;

        internal static
            pb::FieldAccess.FieldAccessorTable
                <global::XPlatform.WheresMyTrain.MTA.Subway.NyctTripDescriptor,
                    global::XPlatform.WheresMyTrain.MTA.Subway.NyctTripDescriptor.Builder>
            internal__static_NyctTripDescriptor__FieldAccessorTable;

        internal static pbd::MessageDescriptor internal__static_NyctStopTimeUpdate__Descriptor;

        internal static
            pb::FieldAccess.FieldAccessorTable
                <global::XPlatform.WheresMyTrain.MTA.Subway.NyctStopTimeUpdate,
                    global::XPlatform.WheresMyTrain.MTA.Subway.NyctStopTimeUpdate.Builder>
            internal__static_NyctStopTimeUpdate__FieldAccessorTable;

        #endregion

        #region Descriptor

        private static pbd::FileDescriptor descriptor;

        static MTASubwayProtos()
        {
            byte[] descriptorData =
                global::System.Convert.FromBase64String("ChVNVEEvbnljdC1zdWJ3YXkucHJvdG8aF01UQS9ndGZzLXJlYWx0aW1lLnBy" +
                                                        "b3RvGiRnb29nbGUvcHJvdG9idWYvY3NoYXJwX29wdGlvbnMucHJvdG8iYgoV" +
                                                        "VHJpcFJlcGxhY2VtZW50UGVyaW9kEhAKCHJvdXRlX2lkGAEgASgJEjcKEnJl" +
                                                        "cGxhY2VtZW50X3BlcmlvZBgCIAEoCzIbLnRyYW5zaXRfcmVhbHRpbWUuVGlt" +
                                                        "ZVJhbmdlImYKDk55Y3RGZWVkSGVhZGVyEhsKE255Y3Rfc3Vid2F5X3ZlcnNp" +
                                                        "b24YASACKAkSNwoXdHJpcF9yZXBsYWNlbWVudF9wZXJpb2QYAiADKAsyFi5U" +
                                                        "cmlwUmVwbGFjZW1lbnRQZXJpb2QipAEKEk55Y3RUcmlwRGVzY3JpcHRvchIQ" +
                                                        "Cgh0cmFpbl9pZBgBIAEoCRITCgtpc19hc3NpZ25lZBgCIAEoCBIwCglkaXJl" +
                                                        "Y3Rpb24YAyABKA4yHS5OeWN0VHJpcERlc2NyaXB0b3IuRGlyZWN0aW9uIjUK" +
                                                        "CURpcmVjdGlvbhIJCgVOT1JUSBABEggKBEVBU1QQAhIJCgVTT1VUSBADEggK" +
                                                        "BFdFU1QQBCJDChJOeWN0U3RvcFRpbWVVcGRhdGUSFwoPc2NoZWR1bGVkX3Ry" +
                                                        "YWNrGAEgASgJEhQKDGFjdHVhbF90cmFjaxgCIAEoCTpIChBueWN0X2ZlZWRf" +
                                                        "aGVhZGVyEhwudHJhbnNpdF9yZWFsdGltZS5GZWVkSGVhZGVyGOkHIAEoCzIP" +
                                                        "Lk55Y3RGZWVkSGVhZGVyOlQKFG55Y3RfdHJpcF9kZXNjcmlwdG9yEiAudHJh" +
                                                        "bnNpdF9yZWFsdGltZS5UcmlwRGVzY3JpcHRvchjpByABKAsyEy5OeWN0VHJp" +
                                                        "cERlc2NyaXB0b3I6YAoVbnljdF9zdG9wX3RpbWVfdXBkYXRlEisudHJhbnNp" +
                                                        "dF9yZWFsdGltZS5UcmlwVXBkYXRlLlN0b3BUaW1lVXBkYXRlGOkHIAEoCzIT" +
                                                        "Lk55Y3RTdG9wVGltZVVwZGF0ZUI4wj41CiJYUGxhdGZvcm0uV2hlcmVzTXlU" +
                                                        "cmFpbi5NVEEuU3Vid2F5Eg9NVEFTdWJ3YXlQcm90b3M=");
            pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
                descriptor = root;
                internal__static_TripReplacementPeriod__Descriptor = Descriptor.MessageTypes[0];
                internal__static_TripReplacementPeriod__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable
                        <global::XPlatform.WheresMyTrain.MTA.Subway.TripReplacementPeriod,
                            global::XPlatform.WheresMyTrain.MTA.Subway.TripReplacementPeriod.Builder>(
                        internal__static_TripReplacementPeriod__Descriptor,
                        new string[] {"RouteId", "ReplacementPeriod",});
                internal__static_NyctFeedHeader__Descriptor = Descriptor.MessageTypes[1];
                internal__static_NyctFeedHeader__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable
                        <global::XPlatform.WheresMyTrain.MTA.Subway.NyctFeedHeader,
                            global::XPlatform.WheresMyTrain.MTA.Subway.NyctFeedHeader.Builder>(
                        internal__static_NyctFeedHeader__Descriptor,
                        new string[] {"NyctSubwayVersion", "TripReplacementPeriod",});
                internal__static_NyctTripDescriptor__Descriptor = Descriptor.MessageTypes[2];
                internal__static_NyctTripDescriptor__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable
                        <global::XPlatform.WheresMyTrain.MTA.Subway.NyctTripDescriptor,
                            global::XPlatform.WheresMyTrain.MTA.Subway.NyctTripDescriptor.Builder>(
                        internal__static_NyctTripDescriptor__Descriptor,
                        new string[] {"TrainId", "IsAssigned", "Direction",});
                internal__static_NyctStopTimeUpdate__Descriptor = Descriptor.MessageTypes[3];
                internal__static_NyctStopTimeUpdate__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable
                        <global::XPlatform.WheresMyTrain.MTA.Subway.NyctStopTimeUpdate,
                            global::XPlatform.WheresMyTrain.MTA.Subway.NyctStopTimeUpdate.Builder>(
                        internal__static_NyctStopTimeUpdate__Descriptor, new string[] {"ScheduledTrack", "ActualTrack",});
                NyctFeedHeader =
                    pb::GeneratedSingleExtension<global::XPlatform.WheresMyTrain.MTA.Subway.NyctFeedHeader>
                        .CreateInstance(Descriptor.Extensions[0]);
                NyctTripDescriptor =
                    pb::GeneratedSingleExtension<global::XPlatform.WheresMyTrain.MTA.Subway.NyctTripDescriptor>
                        .CreateInstance(Descriptor.Extensions[1]);
                NyctStopTimeUpdate =
                    pb::GeneratedSingleExtension<global::XPlatform.WheresMyTrain.MTA.Subway.NyctStopTimeUpdate>
                        .CreateInstance(Descriptor.Extensions[2]);
                pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
                RegisterAllExtensions(registry);
                global::transit_realtime.Gtfsrealtime.RegisterAllExtensions(registry);
                global::Google.ProtocolBuffers.DescriptorProtos.CSharpOptions.RegisterAllExtensions(registry);
                return registry;
            };
            pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
                new pbd::FileDescriptor[]
                {
                    global::transit_realtime.Gtfsrealtime.Descriptor,
                    global::Google.ProtocolBuffers.DescriptorProtos.CSharpOptions.Descriptor,
                }, assigner);
        }

        public static pbd::FileDescriptor Descriptor
        {
            get { return descriptor; }
        }

        #endregion
    }

    #region Messages

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class TripReplacementPeriod :
        pb::GeneratedMessage<TripReplacementPeriod, TripReplacementPeriod.Builder>
    {
        public const int RouteIdFieldNumber = 1;
        public const int ReplacementPeriodFieldNumber = 2;
        private static readonly TripReplacementPeriod defaultInstance = new TripReplacementPeriod().MakeReadOnly();

        private static readonly string[] _tripReplacementPeriodFieldNames = new string[]
        {"replacement_period", "route_id"};

        private static readonly uint[] _tripReplacementPeriodFieldTags = new uint[] {18, 10};
        private bool hasReplacementPeriod;
        private bool hasRouteId;
        private int memoizedSerializedSize = -1;
        private global::transit_realtime.TimeRange replacementPeriod_;
        private string routeId_ = "";

        static TripReplacementPeriod()
        {
            ReferenceEquals(global::XPlatform.WheresMyTrain.MTA.Subway.MTASubwayProtos.Descriptor, null);
        }

        private TripReplacementPeriod()
        {}

        public static TripReplacementPeriod DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override TripReplacementPeriod DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override TripReplacementPeriod ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get
            {
                return
                    global::XPlatform.WheresMyTrain.MTA.Subway.MTASubwayProtos
                        .internal__static_TripReplacementPeriod__Descriptor;
            }
        }

        protected override pb::FieldAccess.FieldAccessorTable<TripReplacementPeriod, TripReplacementPeriod.Builder>
            InternalFieldAccessors
        {
            get
            {
                return
                    global::XPlatform.WheresMyTrain.MTA.Subway.MTASubwayProtos
                        .internal__static_TripReplacementPeriod__FieldAccessorTable;
            }
        }

        public bool HasRouteId
        {
            get { return hasRouteId; }
        }

        public string RouteId
        {
            get { return routeId_; }
        }

        public bool HasReplacementPeriod
        {
            get { return hasReplacementPeriod; }
        }

        public global::transit_realtime.TimeRange ReplacementPeriod
        {
            get { return replacementPeriod_ ?? global::transit_realtime.TimeRange.DefaultInstance; }
        }

        public override bool IsInitialized
        {
            get { return true; }
        }

        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) {
                    return size;
                }

                size = 0;
                if (hasRouteId) {
                    size += pb::CodedOutputStream.ComputeStringSize(1, RouteId);
                }
                if (hasReplacementPeriod) {
                    size += pb::CodedOutputStream.ComputeMessageSize(2, ReplacementPeriod);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _tripReplacementPeriodFieldNames;
            if (hasRouteId) {
                output.WriteString(1, field_names[1], RouteId);
            }
            if (hasReplacementPeriod) {
                output.WriteMessage(2, field_names[0], ReplacementPeriod);
            }
            UnknownFields.WriteTo(output);
        }

        public static TripReplacementPeriod ParseFrom(pb::ByteString data)
        {
            return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }

        public static TripReplacementPeriod ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }

        public static TripReplacementPeriod ParseFrom(byte[] data)
        {
            return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }

        public static TripReplacementPeriod ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }

        public static TripReplacementPeriod ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }

        public static TripReplacementPeriod ParseFrom(global::System.IO.Stream input,
            pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }

        public static TripReplacementPeriod ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }

        public static TripReplacementPeriod ParseDelimitedFrom(global::System.IO.Stream input,
            pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }

        public static TripReplacementPeriod ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }

        public static TripReplacementPeriod ParseFrom(pb::ICodedInputStream input,
            pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }

        private TripReplacementPeriod MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder()
        {
            return new Builder();
        }

        public override Builder ToBuilder()
        {
            return CreateBuilder(this);
        }

        public override Builder CreateBuilderForType()
        {
            return new Builder();
        }

        public static Builder CreateBuilder(TripReplacementPeriod prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<TripReplacementPeriod, Builder>
        {
            private TripReplacementPeriod result;
            private bool resultIsReadOnly;

            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }

            internal Builder(TripReplacementPeriod cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            protected override Builder ThisBuilder
            {
                get { return this; }
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override TripReplacementPeriod MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return Descriptor; }
            }

            public override TripReplacementPeriod DefaultInstanceForType
            {
                get { return DefaultInstance; }
            }

            public bool HasRouteId
            {
                get { return result.hasRouteId; }
            }

            public string RouteId
            {
                get { return result.RouteId; }
                set { SetRouteId(value); }
            }

            public bool HasReplacementPeriod
            {
                get { return result.hasReplacementPeriod; }
            }

            public global::transit_realtime.TimeRange ReplacementPeriod
            {
                get { return result.ReplacementPeriod; }
                set { SetReplacementPeriod(value); }
            }

            private TripReplacementPeriod PrepareBuilder()
            {
                if (resultIsReadOnly) {
                    TripReplacementPeriod original = result;
                    result = new TripReplacementPeriod();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly) {
                    return new Builder(result);
                } else {
                    return new Builder().MergeFrom(result);
                }
            }

            public override TripReplacementPeriod BuildPartial()
            {
                if (resultIsReadOnly) {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is TripReplacementPeriod) {
                    return MergeFrom((TripReplacementPeriod) other);
                } else {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(TripReplacementPeriod other)
            {
                if (other == DefaultInstance) {
                    return this;
                }
                PrepareBuilder();
                if (other.HasRouteId) {
                    RouteId = other.RouteId;
                }
                if (other.HasReplacementPeriod) {
                    MergeReplacementPeriod(other.ReplacementPeriod);
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name)) {
                    if (tag == 0 && field_name != null) {
                        int field_ordinal = global::System.Array.BinarySearch(_tripReplacementPeriodFieldNames,
                            field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0) {
                            tag = _tripReplacementPeriodFieldTags[field_ordinal];
                        } else {
                            if (unknownFields == null) {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag) {
                        case 0:
                        {
                            throw pb::InvalidProtocolBufferException.InvalidTag();
                        }
                        default:
                        {
                            if (pb::WireFormat.IsEndGroupTag(tag)) {
                                if (unknownFields != null) {
                                    this.UnknownFields = unknownFields.Build();
                                }
                                return this;
                            }
                            if (unknownFields == null) {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            break;
                        }
                        case 10:
                        {
                            result.hasRouteId = input.ReadString(ref result.routeId_);
                            break;
                        }
                        case 18:
                        {
                            global::transit_realtime.TimeRange.Builder subBuilder =
                                global::transit_realtime.TimeRange.CreateBuilder();
                            if (result.hasReplacementPeriod) {
                                subBuilder.MergeFrom(ReplacementPeriod);
                            }
                            input.ReadMessage(subBuilder, extensionRegistry);
                            ReplacementPeriod = subBuilder.BuildPartial();
                            break;
                        }
                    }
                }

                if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public Builder SetRouteId(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasRouteId = true;
                result.routeId_ = value;
                return this;
            }

            public Builder ClearRouteId()
            {
                PrepareBuilder();
                result.hasRouteId = false;
                result.routeId_ = "";
                return this;
            }

            public Builder SetReplacementPeriod(global::transit_realtime.TimeRange value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasReplacementPeriod = true;
                result.replacementPeriod_ = value;
                return this;
            }

            public Builder SetReplacementPeriod(global::transit_realtime.TimeRange.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasReplacementPeriod = true;
                result.replacementPeriod_ = builderForValue.Build();
                return this;
            }

            public Builder MergeReplacementPeriod(global::transit_realtime.TimeRange value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasReplacementPeriod &&
                    result.replacementPeriod_ != global::transit_realtime.TimeRange.DefaultInstance) {
                    result.replacementPeriod_ =
                        global::transit_realtime.TimeRange.CreateBuilder(result.replacementPeriod_)
                            .MergeFrom(value)
                            .BuildPartial();
                } else {
                    result.replacementPeriod_ = value;
                }
                result.hasReplacementPeriod = true;
                return this;
            }

            public Builder ClearReplacementPeriod()
            {
                PrepareBuilder();
                result.hasReplacementPeriod = false;
                result.replacementPeriod_ = null;
                return this;
            }
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class NyctFeedHeader : pb::GeneratedMessage<NyctFeedHeader, NyctFeedHeader.Builder>
    {
        public const int NyctSubwayVersionFieldNumber = 1;
        public const int TripReplacementPeriodFieldNumber = 2;
        private static readonly NyctFeedHeader defaultInstance = new NyctFeedHeader().MakeReadOnly();

        private static readonly string[] _nyctFeedHeaderFieldNames = new string[]
        {"nyct_subway_version", "trip_replacement_period"};

        private static readonly uint[] _nyctFeedHeaderFieldTags = new uint[] {10, 18};
        private bool hasNyctSubwayVersion;
        private int memoizedSerializedSize = -1;
        private string nyctSubwayVersion_ = "";

        private pbc::PopsicleList<global::XPlatform.WheresMyTrain.MTA.Subway.TripReplacementPeriod>
            tripReplacementPeriod_ =
                new pbc::PopsicleList<global::XPlatform.WheresMyTrain.MTA.Subway.TripReplacementPeriod>();

        static NyctFeedHeader()
        {
            ReferenceEquals(global::XPlatform.WheresMyTrain.MTA.Subway.MTASubwayProtos.Descriptor, null);
        }

        private NyctFeedHeader()
        {}

        public static NyctFeedHeader DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override NyctFeedHeader DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override NyctFeedHeader ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get
            {
                return
                    global::XPlatform.WheresMyTrain.MTA.Subway.MTASubwayProtos
                        .internal__static_NyctFeedHeader__Descriptor;
            }
        }

        protected override pb::FieldAccess.FieldAccessorTable<NyctFeedHeader, NyctFeedHeader.Builder>
            InternalFieldAccessors
        {
            get
            {
                return
                    global::XPlatform.WheresMyTrain.MTA.Subway.MTASubwayProtos
                        .internal__static_NyctFeedHeader__FieldAccessorTable;
            }
        }

        public bool HasNyctSubwayVersion
        {
            get { return hasNyctSubwayVersion; }
        }

        public string NyctSubwayVersion
        {
            get { return nyctSubwayVersion_; }
        }

        public scg::IList<global::XPlatform.WheresMyTrain.MTA.Subway.TripReplacementPeriod> TripReplacementPeriodList
        {
            get { return tripReplacementPeriod_; }
        }

        public int TripReplacementPeriodCount
        {
            get { return tripReplacementPeriod_.Count; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasNyctSubwayVersion) {
                    return false;
                }
                return true;
            }
        }

        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) {
                    return size;
                }

                size = 0;
                if (hasNyctSubwayVersion) {
                    size += pb::CodedOutputStream.ComputeStringSize(1, NyctSubwayVersion);
                }
                foreach (var element in TripReplacementPeriodList) {
                    size += pb::CodedOutputStream.ComputeMessageSize(2, element);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public global::XPlatform.WheresMyTrain.MTA.Subway.TripReplacementPeriod GetTripReplacementPeriod(int index)
        {
            return tripReplacementPeriod_[index];
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _nyctFeedHeaderFieldNames;
            if (hasNyctSubwayVersion) {
                output.WriteString(1, field_names[0], NyctSubwayVersion);
            }
            if (tripReplacementPeriod_.Count > 0) {
                output.WriteMessageArray(2, field_names[1], tripReplacementPeriod_);
            }
            UnknownFields.WriteTo(output);
        }

        public static NyctFeedHeader ParseFrom(pb::ByteString data)
        {
            return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }

        public static NyctFeedHeader ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }

        public static NyctFeedHeader ParseFrom(byte[] data)
        {
            return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }

        public static NyctFeedHeader ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }

        public static NyctFeedHeader ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }

        public static NyctFeedHeader ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }

        public static NyctFeedHeader ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }

        public static NyctFeedHeader ParseDelimitedFrom(global::System.IO.Stream input,
            pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }

        public static NyctFeedHeader ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }

        public static NyctFeedHeader ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }

        private NyctFeedHeader MakeReadOnly()
        {
            tripReplacementPeriod_.MakeReadOnly();
            return this;
        }

        public static Builder CreateBuilder()
        {
            return new Builder();
        }

        public override Builder ToBuilder()
        {
            return CreateBuilder(this);
        }

        public override Builder CreateBuilderForType()
        {
            return new Builder();
        }

        public static Builder CreateBuilder(NyctFeedHeader prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<NyctFeedHeader, Builder>
        {
            private NyctFeedHeader result;
            private bool resultIsReadOnly;

            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }

            internal Builder(NyctFeedHeader cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            protected override Builder ThisBuilder
            {
                get { return this; }
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override NyctFeedHeader MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return Descriptor; }
            }

            public override NyctFeedHeader DefaultInstanceForType
            {
                get { return DefaultInstance; }
            }

            public bool HasNyctSubwayVersion
            {
                get { return result.hasNyctSubwayVersion; }
            }

            public string NyctSubwayVersion
            {
                get { return result.NyctSubwayVersion; }
                set { SetNyctSubwayVersion(value); }
            }

            public pbc::IPopsicleList<global::XPlatform.WheresMyTrain.MTA.Subway.TripReplacementPeriod>
                TripReplacementPeriodList
            {
                get { return PrepareBuilder().tripReplacementPeriod_; }
            }

            public int TripReplacementPeriodCount
            {
                get { return result.TripReplacementPeriodCount; }
            }

            private NyctFeedHeader PrepareBuilder()
            {
                if (resultIsReadOnly) {
                    NyctFeedHeader original = result;
                    result = new NyctFeedHeader();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly) {
                    return new Builder(result);
                } else {
                    return new Builder().MergeFrom(result);
                }
            }

            public override NyctFeedHeader BuildPartial()
            {
                if (resultIsReadOnly) {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is NyctFeedHeader) {
                    return MergeFrom((NyctFeedHeader) other);
                } else {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(NyctFeedHeader other)
            {
                if (other == DefaultInstance) {
                    return this;
                }
                PrepareBuilder();
                if (other.HasNyctSubwayVersion) {
                    NyctSubwayVersion = other.NyctSubwayVersion;
                }
                if (other.tripReplacementPeriod_.Count != 0) {
                    result.tripReplacementPeriod_.Add(other.tripReplacementPeriod_);
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name)) {
                    if (tag == 0 && field_name != null) {
                        int field_ordinal = global::System.Array.BinarySearch(_nyctFeedHeaderFieldNames, field_name,
                            global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0) {
                            tag = _nyctFeedHeaderFieldTags[field_ordinal];
                        } else {
                            if (unknownFields == null) {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag) {
                        case 0:
                        {
                            throw pb::InvalidProtocolBufferException.InvalidTag();
                        }
                        default:
                        {
                            if (pb::WireFormat.IsEndGroupTag(tag)) {
                                if (unknownFields != null) {
                                    this.UnknownFields = unknownFields.Build();
                                }
                                return this;
                            }
                            if (unknownFields == null) {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            break;
                        }
                        case 10:
                        {
                            result.hasNyctSubwayVersion = input.ReadString(ref result.nyctSubwayVersion_);
                            break;
                        }
                        case 18:
                        {
                            input.ReadMessageArray(tag, field_name, result.tripReplacementPeriod_,
                                global::XPlatform.WheresMyTrain.MTA.Subway.TripReplacementPeriod.DefaultInstance,
                                extensionRegistry);
                            break;
                        }
                    }
                }

                if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public Builder SetNyctSubwayVersion(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasNyctSubwayVersion = true;
                result.nyctSubwayVersion_ = value;
                return this;
            }

            public Builder ClearNyctSubwayVersion()
            {
                PrepareBuilder();
                result.hasNyctSubwayVersion = false;
                result.nyctSubwayVersion_ = "";
                return this;
            }

            public global::XPlatform.WheresMyTrain.MTA.Subway.TripReplacementPeriod GetTripReplacementPeriod(int index)
            {
                return result.GetTripReplacementPeriod(index);
            }

            public Builder SetTripReplacementPeriod(int index,
                global::XPlatform.WheresMyTrain.MTA.Subway.TripReplacementPeriod value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.tripReplacementPeriod_[index] = value;
                return this;
            }

            public Builder SetTripReplacementPeriod(int index,
                global::XPlatform.WheresMyTrain.MTA.Subway.TripReplacementPeriod.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.tripReplacementPeriod_[index] = builderForValue.Build();
                return this;
            }

            public Builder AddTripReplacementPeriod(
                global::XPlatform.WheresMyTrain.MTA.Subway.TripReplacementPeriod value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.tripReplacementPeriod_.Add(value);
                return this;
            }

            public Builder AddTripReplacementPeriod(
                global::XPlatform.WheresMyTrain.MTA.Subway.TripReplacementPeriod.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.tripReplacementPeriod_.Add(builderForValue.Build());
                return this;
            }

            public Builder AddRangeTripReplacementPeriod(
                scg::IEnumerable<global::XPlatform.WheresMyTrain.MTA.Subway.TripReplacementPeriod> values)
            {
                PrepareBuilder();
                result.tripReplacementPeriod_.Add(values);
                return this;
            }

            public Builder ClearTripReplacementPeriod()
            {
                PrepareBuilder();
                result.tripReplacementPeriod_.Clear();
                return this;
            }
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class NyctTripDescriptor :
        pb::GeneratedMessage<NyctTripDescriptor, NyctTripDescriptor.Builder>
    {
        public const int TrainIdFieldNumber = 1;
        public const int IsAssignedFieldNumber = 2;
        public const int DirectionFieldNumber = 3;
        private static readonly NyctTripDescriptor defaultInstance = new NyctTripDescriptor().MakeReadOnly();

        private static readonly string[] _nyctTripDescriptorFieldNames = new string[]
        {"direction", "is_assigned", "train_id"};

        private static readonly uint[] _nyctTripDescriptorFieldTags = new uint[] {24, 16, 10};

        private global::XPlatform.WheresMyTrain.MTA.Subway.NyctTripDescriptor.Types.Direction direction_ =
            global::XPlatform.WheresMyTrain.MTA.Subway.NyctTripDescriptor.Types.Direction.NORTH;

        private bool hasDirection;
        private bool hasIsAssigned;
        private bool hasTrainId;
        private bool isAssigned_;
        private int memoizedSerializedSize = -1;
        private string trainId_ = "";

        static NyctTripDescriptor()
        {
            ReferenceEquals(global::XPlatform.WheresMyTrain.MTA.Subway.MTASubwayProtos.Descriptor, null);
        }

        private NyctTripDescriptor()
        {}

        public static NyctTripDescriptor DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override NyctTripDescriptor DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override NyctTripDescriptor ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get
            {
                return
                    global::XPlatform.WheresMyTrain.MTA.Subway.MTASubwayProtos
                        .internal__static_NyctTripDescriptor__Descriptor;
            }
        }

        protected override pb::FieldAccess.FieldAccessorTable<NyctTripDescriptor, NyctTripDescriptor.Builder>
            InternalFieldAccessors
        {
            get
            {
                return
                    global::XPlatform.WheresMyTrain.MTA.Subway.MTASubwayProtos
                        .internal__static_NyctTripDescriptor__FieldAccessorTable;
            }
        }

        public bool HasTrainId
        {
            get { return hasTrainId; }
        }

        public string TrainId
        {
            get { return trainId_; }
        }

        public bool HasIsAssigned
        {
            get { return hasIsAssigned; }
        }

        public bool IsAssigned
        {
            get { return isAssigned_; }
        }

        public bool HasDirection
        {
            get { return hasDirection; }
        }

        public global::XPlatform.WheresMyTrain.MTA.Subway.NyctTripDescriptor.Types.Direction Direction
        {
            get { return direction_; }
        }

        public override bool IsInitialized
        {
            get { return true; }
        }

        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) {
                    return size;
                }

                size = 0;
                if (hasTrainId) {
                    size += pb::CodedOutputStream.ComputeStringSize(1, TrainId);
                }
                if (hasIsAssigned) {
                    size += pb::CodedOutputStream.ComputeBoolSize(2, IsAssigned);
                }
                if (hasDirection) {
                    size += pb::CodedOutputStream.ComputeEnumSize(3, (int) Direction);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        #region Nested types

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static partial class Types
        {
            public enum Direction
            {
                NORTH = 1,
                EAST = 2,
                SOUTH = 3,
                WEST = 4,
            }
        }

        #endregion

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _nyctTripDescriptorFieldNames;
            if (hasTrainId) {
                output.WriteString(1, field_names[2], TrainId);
            }
            if (hasIsAssigned) {
                output.WriteBool(2, field_names[1], IsAssigned);
            }
            if (hasDirection) {
                output.WriteEnum(3, field_names[0], (int) Direction, Direction);
            }
            UnknownFields.WriteTo(output);
        }

        public static NyctTripDescriptor ParseFrom(pb::ByteString data)
        {
            return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }

        public static NyctTripDescriptor ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }

        public static NyctTripDescriptor ParseFrom(byte[] data)
        {
            return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }

        public static NyctTripDescriptor ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }

        public static NyctTripDescriptor ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }

        public static NyctTripDescriptor ParseFrom(global::System.IO.Stream input,
            pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }

        public static NyctTripDescriptor ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }

        public static NyctTripDescriptor ParseDelimitedFrom(global::System.IO.Stream input,
            pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }

        public static NyctTripDescriptor ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }

        public static NyctTripDescriptor ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }

        private NyctTripDescriptor MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder()
        {
            return new Builder();
        }

        public override Builder ToBuilder()
        {
            return CreateBuilder(this);
        }

        public override Builder CreateBuilderForType()
        {
            return new Builder();
        }

        public static Builder CreateBuilder(NyctTripDescriptor prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<NyctTripDescriptor, Builder>
        {
            private NyctTripDescriptor result;
            private bool resultIsReadOnly;

            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }

            internal Builder(NyctTripDescriptor cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            protected override Builder ThisBuilder
            {
                get { return this; }
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override NyctTripDescriptor MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return Descriptor; }
            }

            public override NyctTripDescriptor DefaultInstanceForType
            {
                get { return DefaultInstance; }
            }

            public bool HasTrainId
            {
                get { return result.hasTrainId; }
            }

            public string TrainId
            {
                get { return result.TrainId; }
                set { SetTrainId(value); }
            }

            public bool HasIsAssigned
            {
                get { return result.hasIsAssigned; }
            }

            public bool IsAssigned
            {
                get { return result.IsAssigned; }
                set { SetIsAssigned(value); }
            }

            public bool HasDirection
            {
                get { return result.hasDirection; }
            }

            public global::XPlatform.WheresMyTrain.MTA.Subway.NyctTripDescriptor.Types.Direction Direction
            {
                get { return result.Direction; }
                set { SetDirection(value); }
            }

            private NyctTripDescriptor PrepareBuilder()
            {
                if (resultIsReadOnly) {
                    NyctTripDescriptor original = result;
                    result = new NyctTripDescriptor();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly) {
                    return new Builder(result);
                } else {
                    return new Builder().MergeFrom(result);
                }
            }

            public override NyctTripDescriptor BuildPartial()
            {
                if (resultIsReadOnly) {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is NyctTripDescriptor) {
                    return MergeFrom((NyctTripDescriptor) other);
                } else {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(NyctTripDescriptor other)
            {
                if (other == DefaultInstance) {
                    return this;
                }
                PrepareBuilder();
                if (other.HasTrainId) {
                    TrainId = other.TrainId;
                }
                if (other.HasIsAssigned) {
                    IsAssigned = other.IsAssigned;
                }
                if (other.HasDirection) {
                    Direction = other.Direction;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name)) {
                    if (tag == 0 && field_name != null) {
                        int field_ordinal = global::System.Array.BinarySearch(_nyctTripDescriptorFieldNames, field_name,
                            global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0) {
                            tag = _nyctTripDescriptorFieldTags[field_ordinal];
                        } else {
                            if (unknownFields == null) {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag) {
                        case 0:
                        {
                            throw pb::InvalidProtocolBufferException.InvalidTag();
                        }
                        default:
                        {
                            if (pb::WireFormat.IsEndGroupTag(tag)) {
                                if (unknownFields != null) {
                                    this.UnknownFields = unknownFields.Build();
                                }
                                return this;
                            }
                            if (unknownFields == null) {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            break;
                        }
                        case 10:
                        {
                            result.hasTrainId = input.ReadString(ref result.trainId_);
                            break;
                        }
                        case 16:
                        {
                            result.hasIsAssigned = input.ReadBool(ref result.isAssigned_);
                            break;
                        }
                        case 24:
                        {
                            object unknown;
                            if (input.ReadEnum(ref result.direction_, out unknown)) {
                                result.hasDirection = true;
                            } else if (unknown is int) {
                                if (unknownFields == null) {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                unknownFields.MergeVarintField(3, (ulong) (int) unknown);
                            }
                            break;
                        }
                    }
                }

                if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public Builder SetTrainId(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasTrainId = true;
                result.trainId_ = value;
                return this;
            }

            public Builder ClearTrainId()
            {
                PrepareBuilder();
                result.hasTrainId = false;
                result.trainId_ = "";
                return this;
            }

            public Builder SetIsAssigned(bool value)
            {
                PrepareBuilder();
                result.hasIsAssigned = true;
                result.isAssigned_ = value;
                return this;
            }

            public Builder ClearIsAssigned()
            {
                PrepareBuilder();
                result.hasIsAssigned = false;
                result.isAssigned_ = false;
                return this;
            }

            public Builder SetDirection(
                global::XPlatform.WheresMyTrain.MTA.Subway.NyctTripDescriptor.Types.Direction value)
            {
                PrepareBuilder();
                result.hasDirection = true;
                result.direction_ = value;
                return this;
            }

            public Builder ClearDirection()
            {
                PrepareBuilder();
                result.hasDirection = false;
                result.direction_ = global::XPlatform.WheresMyTrain.MTA.Subway.NyctTripDescriptor.Types.Direction.NORTH;
                return this;
            }
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class NyctStopTimeUpdate :
        pb::GeneratedMessage<NyctStopTimeUpdate, NyctStopTimeUpdate.Builder>
    {
        public const int ScheduledTrackFieldNumber = 1;
        public const int ActualTrackFieldNumber = 2;
        private static readonly NyctStopTimeUpdate defaultInstance = new NyctStopTimeUpdate().MakeReadOnly();

        private static readonly string[] _nyctStopTimeUpdateFieldNames = new string[]
        {"actual_track", "scheduled_track"};

        private static readonly uint[] _nyctStopTimeUpdateFieldTags = new uint[] {18, 10};
        private string actualTrack_ = "";
        private bool hasActualTrack;
        private bool hasScheduledTrack;
        private int memoizedSerializedSize = -1;
        private string scheduledTrack_ = "";

        static NyctStopTimeUpdate()
        {
            ReferenceEquals(global::XPlatform.WheresMyTrain.MTA.Subway.MTASubwayProtos.Descriptor, null);
        }

        private NyctStopTimeUpdate()
        {}

        public static NyctStopTimeUpdate DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override NyctStopTimeUpdate DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override NyctStopTimeUpdate ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get
            {
                return
                    global::XPlatform.WheresMyTrain.MTA.Subway.MTASubwayProtos
                        .internal__static_NyctStopTimeUpdate__Descriptor;
            }
        }

        protected override pb::FieldAccess.FieldAccessorTable<NyctStopTimeUpdate, NyctStopTimeUpdate.Builder>
            InternalFieldAccessors
        {
            get
            {
                return
                    global::XPlatform.WheresMyTrain.MTA.Subway.MTASubwayProtos
                        .internal__static_NyctStopTimeUpdate__FieldAccessorTable;
            }
        }

        public bool HasScheduledTrack
        {
            get { return hasScheduledTrack; }
        }

        public string ScheduledTrack
        {
            get { return scheduledTrack_; }
        }

        public bool HasActualTrack
        {
            get { return hasActualTrack; }
        }

        public string ActualTrack
        {
            get { return actualTrack_; }
        }

        public override bool IsInitialized
        {
            get { return true; }
        }

        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) {
                    return size;
                }

                size = 0;
                if (hasScheduledTrack) {
                    size += pb::CodedOutputStream.ComputeStringSize(1, ScheduledTrack);
                }
                if (hasActualTrack) {
                    size += pb::CodedOutputStream.ComputeStringSize(2, ActualTrack);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _nyctStopTimeUpdateFieldNames;
            if (hasScheduledTrack) {
                output.WriteString(1, field_names[1], ScheduledTrack);
            }
            if (hasActualTrack) {
                output.WriteString(2, field_names[0], ActualTrack);
            }
            UnknownFields.WriteTo(output);
        }

        public static NyctStopTimeUpdate ParseFrom(pb::ByteString data)
        {
            return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }

        public static NyctStopTimeUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }

        public static NyctStopTimeUpdate ParseFrom(byte[] data)
        {
            return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }

        public static NyctStopTimeUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }

        public static NyctStopTimeUpdate ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }

        public static NyctStopTimeUpdate ParseFrom(global::System.IO.Stream input,
            pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }

        public static NyctStopTimeUpdate ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }

        public static NyctStopTimeUpdate ParseDelimitedFrom(global::System.IO.Stream input,
            pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }

        public static NyctStopTimeUpdate ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }

        public static NyctStopTimeUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }

        private NyctStopTimeUpdate MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder()
        {
            return new Builder();
        }

        public override Builder ToBuilder()
        {
            return CreateBuilder(this);
        }

        public override Builder CreateBuilderForType()
        {
            return new Builder();
        }

        public static Builder CreateBuilder(NyctStopTimeUpdate prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<NyctStopTimeUpdate, Builder>
        {
            private NyctStopTimeUpdate result;
            private bool resultIsReadOnly;

            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }

            internal Builder(NyctStopTimeUpdate cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            protected override Builder ThisBuilder
            {
                get { return this; }
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override NyctStopTimeUpdate MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return Descriptor; }
            }

            public override NyctStopTimeUpdate DefaultInstanceForType
            {
                get { return DefaultInstance; }
            }

            public bool HasScheduledTrack
            {
                get { return result.hasScheduledTrack; }
            }

            public string ScheduledTrack
            {
                get { return result.ScheduledTrack; }
                set { SetScheduledTrack(value); }
            }

            public bool HasActualTrack
            {
                get { return result.hasActualTrack; }
            }

            public string ActualTrack
            {
                get { return result.ActualTrack; }
                set { SetActualTrack(value); }
            }

            private NyctStopTimeUpdate PrepareBuilder()
            {
                if (resultIsReadOnly) {
                    NyctStopTimeUpdate original = result;
                    result = new NyctStopTimeUpdate();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly) {
                    return new Builder(result);
                } else {
                    return new Builder().MergeFrom(result);
                }
            }

            public override NyctStopTimeUpdate BuildPartial()
            {
                if (resultIsReadOnly) {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is NyctStopTimeUpdate) {
                    return MergeFrom((NyctStopTimeUpdate) other);
                } else {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(NyctStopTimeUpdate other)
            {
                if (other == DefaultInstance) {
                    return this;
                }
                PrepareBuilder();
                if (other.HasScheduledTrack) {
                    ScheduledTrack = other.ScheduledTrack;
                }
                if (other.HasActualTrack) {
                    ActualTrack = other.ActualTrack;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name)) {
                    if (tag == 0 && field_name != null) {
                        int field_ordinal = global::System.Array.BinarySearch(_nyctStopTimeUpdateFieldNames, field_name,
                            global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0) {
                            tag = _nyctStopTimeUpdateFieldTags[field_ordinal];
                        } else {
                            if (unknownFields == null) {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag) {
                        case 0:
                        {
                            throw pb::InvalidProtocolBufferException.InvalidTag();
                        }
                        default:
                        {
                            if (pb::WireFormat.IsEndGroupTag(tag)) {
                                if (unknownFields != null) {
                                    this.UnknownFields = unknownFields.Build();
                                }
                                return this;
                            }
                            if (unknownFields == null) {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            break;
                        }
                        case 10:
                        {
                            result.hasScheduledTrack = input.ReadString(ref result.scheduledTrack_);
                            break;
                        }
                        case 18:
                        {
                            result.hasActualTrack = input.ReadString(ref result.actualTrack_);
                            break;
                        }
                    }
                }

                if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public Builder SetScheduledTrack(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasScheduledTrack = true;
                result.scheduledTrack_ = value;
                return this;
            }

            public Builder ClearScheduledTrack()
            {
                PrepareBuilder();
                result.hasScheduledTrack = false;
                result.scheduledTrack_ = "";
                return this;
            }

            public Builder SetActualTrack(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasActualTrack = true;
                result.actualTrack_ = value;
                return this;
            }

            public Builder ClearActualTrack()
            {
                PrepareBuilder();
                result.hasActualTrack = false;
                result.actualTrack_ = "";
                return this;
            }
        }
    }

    #endregion
}

#endregion Designer generated code